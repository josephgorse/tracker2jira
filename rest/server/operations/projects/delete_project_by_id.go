// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteProjectByIDHandlerFunc turns a function with the right signature into a delete project by ID handler
type DeleteProjectByIDHandlerFunc func(DeleteProjectByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteProjectByIDHandlerFunc) Handle(params DeleteProjectByIDParams) middleware.Responder {
	return fn(params)
}

// DeleteProjectByIDHandler interface for that can handle valid delete project by ID params
type DeleteProjectByIDHandler interface {
	Handle(DeleteProjectByIDParams) middleware.Responder
}

// NewDeleteProjectByID creates a new http.Handler for the delete project by ID operation
func NewDeleteProjectByID(ctx *middleware.Context, handler DeleteProjectByIDHandler) *DeleteProjectByID {
	return &DeleteProjectByID{Context: ctx, Handler: handler}
}

/*DeleteProjectByID swagger:route DELETE /projects/{projectID} projects deleteProjectById

Delete the project by ID

Delete the project object.

*/
type DeleteProjectByID struct {
	Context *middleware.Context
	Handler DeleteProjectByIDHandler
}

func (o *DeleteProjectByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteProjectByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
