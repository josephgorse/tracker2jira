// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddANewTaskHandlerFunc turns a function with the right signature into a add a new task handler
type AddANewTaskHandlerFunc func(AddANewTaskParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddANewTaskHandlerFunc) Handle(params AddANewTaskParams) middleware.Responder {
	return fn(params)
}

// AddANewTaskHandler interface for that can handle valid add a new task params
type AddANewTaskHandler interface {
	Handle(AddANewTaskParams) middleware.Responder
}

// NewAddANewTask creates a new http.Handler for the add a new task operation
func NewAddANewTask(ctx *middleware.Context, handler AddANewTaskHandler) *AddANewTask {
	return &AddANewTask{Context: ctx, Handler: handler}
}

/*AddANewTask swagger:route POST /tasks projects addANewTask

Adds a task configuration

Post a new task config

*/
type AddANewTask struct {
	Context *middleware.Context
	Handler AddANewTaskHandler
}

func (o *AddANewTask) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddANewTaskParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
