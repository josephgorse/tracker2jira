swagger: "2.0"
info:
  description: "Pivotal Tracker to JIRA synchronization service."
  version: "0.0.1"
  title: "Tracker 2 JIRA"
  termsOfService: "https://github.com/king-jam/tracker2jira/blob/master/docs/TOS.md"
  contact:
    email: "james.r.king4@gmail.com"
  license:
    name: "Mozilla Public License 2.0"
    url: "https://www.mozilla.org/en-US/MPL/2.0/"
#basePath: "/"
tags:
- name: "general"
  description: "General Application Settings & Information"
  externalDocs:
    description: "Documentation"
    url: "https://github.com/king-jam/tracker2jira/blob/master/docs/README.md"
- name: "projects"
  description: "Project configurations that are under management"
- name: "users"
  description: "Operations about project members"
schemes:
- "http"
- "https"
paths:
  # The general base routes
  /:
    get:
      tags:
      - "general"
      summary: "Returns the default home page"
      operationId: "root"
      responses:
        200:
          description: "The default home page for the application"
  /version:
    get:
      tags:
      - "general"
      summary: "Returns the current version running."
      operationId: "version"
      responses:
        200:
          description: "The current version of the service"
          schema:
            $ref: "#/definitions/Version"
  # /login:
  #   post:
  #     tags:
  #     - "general"
  #     summary: "Logs in and returns authentication type based on parameters"
  #     description: ""
  #     operationId: "login"
  #     consumes:
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "loginRequest"
  #       required: true
  #       description: "A JSON obect containing the login and password"
  #       schema:
  #         $ref: "#/definitions/LoginRequest"
  #     responses:
  #       200:
  #         description: "Successful Login"
  #       400:
  #         description: "Invalid username/password"
  #/logout: #stubbed out for now
  # /config:
  #   get:
  #     tags:
  #     - "general"
  #     summary: "Get the current running configuration"
  #     responses:
  #       200:
  #         description: "The current configuration"
  #   patch:
  #     tags:
  #     - "general"
  #     summary: "Update the current running configuration"
  #     responses:
  #       200:
  #         description: "Configuration Changed"

  /projects:
    get:
      tags:
      - "projects"
      summary: "Returns all the projects."
      operationId: "getProjects"
      responses:
        200:
          description: "The list of current projects"
          schema:
            $ref: "#/definitions/Projects"
        400:
          description: "Bad Request"
    post:
      tags:
      - "projects"
      summary: "Adds a project configuration"
      description: "Post a new project config"
      operationId: "postProject"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Project definition"
        required: true
        schema:
          $ref: "#/definitions/Project"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
    # delete:
  /projects/{projectID}:
    get:
      tags:
      - "projects"
      summary: "gets the project from ID"
      description: "getting project object"
      operationId: "getProjectByID"
      produces:
      - "application/json"
      parameters:
      - name: "projectID"
        in: "path"
        description: "ID of project to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        404:
          description: "Project not found"
    # delete
  /tasks:
    get:
      tags:
      - "projects"
      summary: "Returns all the tasks."
      operationId: "getTasks"
      responses:
        200:
          description: "The list of current tasks"
          schema:
            $ref: "#/definitions/Tasks"
        400:
          description: "Bad Request"
    post:
      tags:
      - "projects"
      summary: "Adds a task configuration"
      description: "Post a new task config"
      operationId: "postTask"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task definition"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
    # delete:
  /tasks/{taskID}:
    get:
      tags:
      - "projects"
      summary: "gets the task from ID"
      description: "getting task object"
      operationId: "getTaskByID"
      produces:
      - "application/json"
      parameters:
      - name: "taskID"
        in: "path"
        description: "ID of task to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        404:
          description: "Task not found"
    # delete
  /users:
    get:
      tags:
      - "users"
      summary: "Returns all the users."
      operationId: "getUsers"
      responses:
        200:
          description: "The list of current users"
          schema:
            $ref: "#/definitions/Users"
        400:
          description: "Bad Request"
    post:
      tags:
      - "users"
      summary: "Adds a new user configuration"
      description: "Post a new user config"
      operationId: "postUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User definition"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad Request"
    # delete:
  /users/{userID}:
    get:
      tags:
      - "users"
      summary: "gets the user from ID"
      description: "getting user object"
      operationId: "getUserByID"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
    # delete

# securityDefinitions:
#   ApiKeyAuth:
#     type: apiKey
#     in: header
#     name: X-API-Key
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/Error"
definitions:
  LoginRequest:
    description: "Login Request Body"
    type: "object"
    properties:
      name:
        type: "string"
      password:
        type: "string"
  # Schema for error response body
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
    required:
      - code
      - message
  Projects:
    type: "array"
    items:
      $ref: "#/definitions/Project"
  Project:
    type: "object"
    properties:
      projectID:
        type: "string"
      projectType:
        type: "string"
      externalID:
        type: "string"
      adminUserID:
        type: "string"
      projectURL:
        type: "string"
      projectOverrides:
        type: "object"
  Tasks:
    type: "array"
    items:
      $ref: "#/definitions/Task"
  Task:
    type: "object"
    properties:
      taskID:
        type: "string"
      master:
        type: "string"
      slave:
        type: "string"
      status:
        type: "string"
      currentStateMap:
        type: "object"
      storyTypeMap:
        type: "object"
      storyFieldMap:
        type: "object"
  Users:
    type: "array"
    items:
      $ref: "#/definitions/User"
  User:
    type: "object"
    properties:
      userID:
        type: "string"
      username:
        type: "string"
      externalCredentials:
        type: "object"
  Version:
    type: "object"
    properties:
      buildDate:
        type: "string"
      commitHash:
        type: "string"
      releaseVersion:
        type: "string"
      runtime:
        type: "string"
