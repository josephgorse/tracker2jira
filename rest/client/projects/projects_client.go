// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetProjectByID gets the project from ID

getting project object
*/
func (a *Client) GetProjectByID(params *GetProjectByIDParams) (*GetProjectByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectByID",
		Method:             "GET",
		PathPattern:        "/projects/{projectID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectByIDOK), nil

}

/*
GetProjects returns all the projects
*/
func (a *Client) GetProjects(params *GetProjectsParams) (*GetProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjects",
		Method:             "GET",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectsOK), nil

}

/*
GetTaskByID gets the task from ID

getting task object
*/
func (a *Client) GetTaskByID(params *GetTaskByIDParams) (*GetTaskByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskByID",
		Method:             "GET",
		PathPattern:        "/tasks/{taskID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTaskByIDOK), nil

}

/*
GetTasks returns all the tasks
*/
func (a *Client) GetTasks(params *GetTasksParams) (*GetTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasks",
		Method:             "GET",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTasksOK), nil

}

/*
PostProject adds a project configuration

Post a new project config
*/
func (a *Client) PostProject(params *PostProjectParams) (*PostProjectCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postProject",
		Method:             "POST",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProjectCreated), nil

}

/*
PostTask adds a task configuration

Post a new task config
*/
func (a *Client) PostTask(params *PostTaskParams) (*PostTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTask",
		Method:             "POST",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTaskCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
